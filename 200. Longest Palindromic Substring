class Solution {
public:
    /**
     * @param s: input string
     * @return: the longest palindromic substring
     */
    string longestPalindrome(string &s) {
        // write your code here
        if(s.length() == 0)
            return "";
        int maxlen = 1;
        int start = 0;
        int end = 0;
        for(int i=0; i<s.length(); i++)
        {
            search(s, i, i+1, maxlen, start, end); // 当作偶数处理
            search(s, i-1, i+1, maxlen, start, end); // 当作奇数处理
        }
        return s.substr(start, end - start + 1);
    }
    
    void search(string &s, int left, int right, int &maxlen, int &start, int &end)
    {
        while(left >= 0 && right < s.length())
        {
            if(s[left] != s[right])
                break;
            left--;
            right++;
        }
        int len = right-left-1; // 记录回文的长度
        if(len > maxlen)
        {
            maxlen = len;
            start = left+1;
            end = right-1;
        }
        return;
    }
};
