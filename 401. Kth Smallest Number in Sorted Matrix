class Solution {
public:
    /**
     * @param matrix: a matrix of integers
     * @param k: An integer
     * @return: the kth smallest number in the matrix
     */
    int kthSmallest(vector<vector<int>> &matrix, int k) {
        // write your code here
        // 利用最大堆存放元素
        if(matrix.size() == 0 || matrix[0].size() == 0 )
            return 0;
        int n = matrix.size(), m = matrix[0].size();
        if(k > n*m || k <= 0)
            return 0;
        
        // priority_queue<int, vector<int>> q;
        // for(int i=0; i<n; i++)
        //     for(int j=0; j<m; j++)
        //     {
        //         q.push(matrix[i][j]);
        //         if(q.size() > k)
        //             q.pop();
        //     }
        // return q.top();
        
        // 利用有序数组进行优化，从第一行第一列开始，每次向小顶堆放入堆顶元素的下方和右方的元素并把堆顶弹出，弹出k-1次后的元素就是所求。另外需要注意不能重复入堆，时间复杂度为O(klogN), 其中N为n和m的最大值
        
        struct cmp{  // 用cmp可以覆盖多种类型的自定义方法
            bool operator() (vector<int> x, vector<int> y){ // 利用vector定义一个带有比较功能的结构体
                return x[0] > y[0];}
            };
            
        priority_queue< vector<int>, vector< vector<int>>, cmp> q;
        vector< vector<bool> > visited(n, vector<bool>(m, false));
        int i=0, j=0;
        vector<int> point{matrix[0][0], 0, 0};
        q.push(point);
        visited[0][0] = true;
        
        for(int i=0; i<k-1; i++)
        {
            point = q.top();
            int x = point[1];
            int y = point[2];
            if(x < n-1 && visited[x+1][y] == false)
            {
                q.push(vector<int>{matrix[x+1][y], x+1, y});
                visited[x+1][y] = true;
            }
            if(y < m-1 && visited[x][y+1] == false)
            {
                q.push(vector<int>{matrix[x][y+1], x, y+1});
                visited[x][y+1] = true;
            }
            q.pop();
        }
        return q.top()[0];
    }
};
