class Solution {
public:
    /**
     * @param heights: a list of integers
     * @return: a integer
     */
    int trapRainWater(vector<int> &heights) {
        // write your code here
        // 思路1：利用双指针
        int res = 0, l = 0, r = heights.size() - 1;
        while (l < r) {
            int mn = min(heights[l], heights[r]);
            if (mn == heights[l]) {
                ++l;
                while (l < r && heights[l] < mn) {
                    res += mn - heights[l++];
                }
            } else {
                --r;
                while (l < r && heights[r] < mn) {
                    res += mn - heights[r--];
                }
            }
        }
        return res;
        
        // 思路2：寻找最大高度所在的位置，分前后两部分进行积累
        // int maxheight = 0, maxheightIndex = 0;
        // for(int i=0; i<heights.size(); i++)
        //     if(maxheight < heights[i])
        //     {
        //         maxheight = heights[i];
        //         maxheightIndex = i;
        //     }
        // int sum = 0;
        // maxheight = 0;
        // for(int i=0; i<maxheightIndex; i++)
        // {
        //     if(maxheight > heights[i])
        //         sum += maxheight - heights[i];
        //     else
        //         maxheight = heights[i];
        // }
        
        // maxheight = 0;
        // for(int i=heights.size()-1; i>maxheightIndex; i--)
        // {
        //     if(maxheight > heights[i])
        //         sum += maxheight - heights[i];
        //     else
        //         maxheight = heights[i];
        // }
        // return sum;
    }
};
