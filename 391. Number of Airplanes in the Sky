/**
 * Definition of Interval:
 * classs Interval {
 *     int start, end;
 *     Interval(int start, int end) {
 *         this->start = start;
 *         this->end = end;
 *     }
 * }
 */

class Solution {
public:
    /**
     * @param airplanes: An interval array
     * @return: Count of airplanes are in the sky.
     */
     
    // 思路1：递归暴力解
    // int countOfAirplanes(vector<Interval> &airplanes) {
    //     // write your code here
    //     if(airplanes.size() == 0)
    //         return 0;
    //     int maxcount = 1;
    //     Interval cur(-1, -1);
    //     dfs(airplanes, 0, maxcount, 0, cur);
    //     return maxcount;
    // }
    // void dfs(vector<Interval>& airplanes, int index, int &maxcount, int count, Interval cur)
    // {
    //     maxcount = max(maxcount, count);
    //     for(int i=index; i<airplanes.size(); i++)
    //     {
    //         int raw_start = cur.start;
    //         int raw_end = cur.end;
    //         if(cur.start == -1 && cur.end == -1)
    //         {
    //             cur.start = airplanes[i].start;
    //             cur.end = airplanes[i].end;
    //         }
    //         else if(cur.end > airplanes[i].start && airplanes[i].end > cur.start)
    //         {
    //             cur.start = max(cur.start, airplanes[i].start);
    //             if(cur.end > airplanes[i].end)
    //                 cur.end = airplanes[i].end;
    //         }
    //         else 
    //             continue;
    //         dfs(airplanes, i+1, maxcount, count+1, cur);
    //         cur.start = raw_start;
    //         cur.end = raw_end;
    //     }
    // }
    
    // 思路2：利用小顶堆存放降落时间，将数组按起飞时间升序排序，然后对堆中的降落时间与起飞时间进行比较，若起飞时间大于当前降落时间，从堆中pop，中间记录堆的大小，最大的堆就是结果。
    static bool cmp(Interval &x, Interval &y)
    {
        return x.start < y.start;
    }
    int countOfAirplanes(vector<Interval> &airplanes) {
        if(airplanes.size() == 0)
            return 0;
        sort(airplanes.begin(), airplanes.end(), cmp);
        priority_queue<int, vector<int>, greater<int> > q;
        int maxcount = 0;
        for(int i=0; i<airplanes.size(); i++)
        {
            if(!q.empty() && q.top() <= airplanes[i].start)
                q.pop();
            q.push(airplanes[i].end);
            if(q.size() > maxcount)
                maxcount = q.size();
        }
        return maxcount;
    }
};
